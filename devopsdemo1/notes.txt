export GOOGLE_CLOUD_PROJECT_ID=gab-devops-1 
export GOOGLE_CLOUD_REGION=us-central1
export GOOGLE_CLOUD_ZONE=us-central1-a
export SKAFFOLD_DEFAULT_REPO=$GOOGLE_CLOUD_REGION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT_ID/devopsdemo1repo

gcloud artifacts repositories create devopsdemo2repo --repository-format=docker \
--location=$GOOGLE_CLOUD_REGION --project $GOOGLE_CLOUD_PROJECT_ID --description="Docker repository for devopsdemo1" 
gcloud auth configure-docker $GOOGLE_CLOUD_REGION-docker.pkg.dev
export SKAFFOLD_DEFAULT_REPO=$GOOGLE_CLOUD_REGION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT_ID/devopsdemo1repo


gcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe $GOOGLE_CLOUD_PROJECT_ID \
--format="value(projectNumber)")-compute@developer.gserviceaccount.com \
--role="roles/clouddeploy.jobRunner"

gcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe $GOOGLE_CLOUD_PROJECT_ID \
--format="value(projectNumber)")-compute@developer.gserviceaccount.com \
--role="roles/container.developer"

gcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe $GOOGLE_CLOUD_PROJECT_ID \
--format="value(projectNumber)")-compute@developer.gserviceaccount.com \
--role="roles/container.developer"


sed -i "s/GOOGLE_CLOUD_PROJECT_ID/$GOOGLE_CLOUD_PROJECT_ID/g" clouddeploy.yaml
on mac : sed -i "" "s/GOOGLE_CLOUD_PROJECT_ID/$GOOGLE_CLOUD_PROJECT_ID/g" clouddeploy.yaml
net
sed -i "s/GOOGLE_CLOUD_REGION/$GOOGLE_CLOUD_REGION/g" clouddeploy.yaml
on mac : sed -i "" "s/GOOGLE_CLOUD_REGION/$GOOGLE_CLOUD_REGION/g" clouddeploy.yaml

gcloud deploy apply --file clouddeploy.yaml \
 --region=$GOOGLE_CLOUD_REGION --project=$GOOGLE_CLOUD_PROJECT_ID

gcloud deploy apply --file clouddeploy-run.yaml \
 --region=$GOOGLE_CLOUD_REGION --project=$GOOGLE_CLOUD_PROJECT_ID

gcloud deploy apply --file clouddeploy-gke.yaml \
 --region=$GOOGLE_CLOUD_REGION --project=$GOOGLE_CLOUD_PROJECT_ID


gcloud deploy releases create release-101 \
 --project=$GOOGLE_CLOUD_PROJECT_ID --region=$GOOGLE_CLOUD_REGION \
 --delivery-pipeline=canary --to-target=dev \
 --images=quotes-back=$(skaffold build -q | jq -r ".builds[].tag")


#ERROR: (gcloud.deploy.releases.create) FAILED_PRECONDITION: if a Cloud Run target is used all targets in a pipeline must be Cloud Run targets. dev-back is not: failed precondition

#cd quotes-front
gcloud deploy releases create release-114 \
 --project=$GOOGLE_CLOUD_PROJECT_ID --region=$GOOGLE_CLOUD_REGION \
 --skaffold-version=skaffold_preview \
 --skaffold-file=quotes-front/skaffold.yaml \
 --delivery-pipeline=devopsdemo1-run --to-target=dev \
 --images=quotes-front=$LOCATION-docker.pkg.dev/$PROJECT_ID/devopsdemo1repo/quotes-front:86002a7-dirty 
# --images=quotes-front=$(skaffold -f=quotes-front/skaffold.yaml build -q | jq -r ".builds[].tag")

#cd quotes-back
gcloud deploy releases create release-115 \
 --project=$GOOGLE_CLOUD_PROJECT_ID --region=$GOOGLE_CLOUD_REGION \
 --skaffold-file=quotes-back/skaffold.yaml \
 --delivery-pipeline=devopsdemo1-gke --to-target=dev \
 --images=quotes-front=$LOCATION-docker.pkg.dev/$PROJECT_ID/devopsdemo1repo/quotes-back:86002a7-dirty
# --images=quotes-back=$(skaffold build -q | jq -r ".builds[].tag")

gcloud auth application-default login
#gcloud run services add-iam-policy-binding quotes-front --member="allUsers"  --role=roles/run.invoker --region=$GOOGLE_CLOUD_REGION
#gcloud run deploy quotes-front --allow-unauthenticated --image=$SKAFFOLD_DEFAULT_REPO/quotes-front:6148d1b-dirty --platform managed --region=$GOOGLE_CLOUD_REGION
gcloud run services set-iam-policy quotes-front policy.yaml --region=$GOOGLE_CLOUD_REGION

gcloud compute ssl-certificates delete gab-devops-certificate
gcloud compute ssl-certificates create gab-dev-certificate --domains app.dev.gabrielbechara.com --global
gcloud compute ssl-certificates create gab-prod-certificate --domains app.prod.gabrielbechara.com --global

gcloud container clusters resize example-cluster --num-nodes=0 --region=us-central1
gcloud container clusters resize example-cluster --num-nodes=1 --region=us-central1
gcloud deploy delivery-pipelines delete canary --region=$GOOGLE_CLOUD_REGION --project=$GOOGLE_CLOUD_PROJECT_ID --force

#npm cache clean --force 
npm install react --save
npm install webpack --save
#npm i webpack webpack-dev-server webpack-cli --save-dev
npm install process
npm install semantic-ui-react semantic-ui-css --save
npm install react-bootstrap --save
npm install react-native --save
npm install react-native-web --save
##### npm uninstall react-refresh --save
##### if problem after installing react-refresh nees to delete package-lock.json and node_modules afterwards and reinstall
npm install react-scripts --save
npm install react-table-scroll --save
# npm install @react-oauth/google@latest --save
npm install @auth0/auth0-react --save
npm install react-cookie --save
#npm install js-cookie --save
#npm update


#gcloud builds submit --region=us-central1 --tag $GOOGLE_CLOUD_REGION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT_ID/devopsdemo1repo/quotes-back ./app
gcloud builds submit --region=us-central1 --config cloudbuild.yaml ./


#network utils
#sudo apt install net-tools -y
sudo apt install iproute2 -y
sudo apt-get install ethtool
sudo apt-get install bridge-utils
netstat -rn
arp 
ip link sh
ethtool -S eth0
brctl show
ip -br addr sh

go mod tidy
go get github.com/auth0/go-jwt-middleware/v2
go get cloud.google.com/go/vertexai

terraform state list | xargs -L 1 terraform state rm

Examples pqsl 
# GRANT pg_read_all_data TO postgres;
# GRANT ALL ON ALL TABLES IN SCHEMA public TO postgres;
# ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES TO postgres;

#GRANT ALL ON ALL TABLES IN SCHEMA public TO postgres;
#ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES TO postgres;
#ALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE SELECT, UPDATE, INSERT, DELETE ON TABLES FROM postgres;
#REVOKE ALL ON ALL TABLES IN SCHEMA public FROM postgres;
#REVOKE ALL ON SCHEMA public FROM public;
#REVOKE ALL PRIVILEGES ON SCHEMA public FROM public;
#REVOKE ALL on ALL TABLES IN SCHEMA public FROM public;
#GRANT ALL ON ALL TABLES IN SCHEMA public TO postgres;
#ALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE SELECT, UPDATE, INSERT, DELETE ON TABLES FROM postgres;
#ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES TO postgres;

#ALTER DATABASE postgres SET SEARCH_PATH to default;
#grant usage on schema public to public;
#grant create on schema public to public;
#GRANT ALL ON SCHEMA public TO public;

SELECT usename FROM pg_catalog.pg_user;
show search_path;
ALTER DATABASE "quotes-app-db" SET SEARCH_PATH to default;
GRANT ALL ON SCHEMA public TO "cloudsql-sa@gab-devops-1.iam";
#grant usage on schema public to "cloudsql-sa@gab-devops-1.iam";
#grant create on schema public to "cloudsql-sa@gab-devops-1.iam";

https://app.dev.gab-devops-1.gabrielbechara.demo.altostrat.com/api/citations
